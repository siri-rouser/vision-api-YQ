// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 23.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `visionapi/detector.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:visionapi.DetectionOutput)
pub struct DetectionOutput {
    // message fields
    // @@protoc_insertion_point(field:visionapi.DetectionOutput.frame)
    pub frame: ::protobuf::MessageField<super::videosource::VideoFrame>,
    // @@protoc_insertion_point(field:visionapi.DetectionOutput.detections)
    pub detections: ::std::vec::Vec<Detection>,
    // special fields
    // @@protoc_insertion_point(special_field:visionapi.DetectionOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetectionOutput {
    fn default() -> &'a DetectionOutput {
        <DetectionOutput as ::protobuf::Message>::default_instance()
    }
}

impl DetectionOutput {
    pub fn new() -> DetectionOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::videosource::VideoFrame>(
            "frame",
            |m: &DetectionOutput| { &m.frame },
            |m: &mut DetectionOutput| { &mut m.frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "detections",
            |m: &DetectionOutput| { &m.detections },
            |m: &mut DetectionOutput| { &mut m.detections },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetectionOutput>(
            "DetectionOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetectionOutput {
    const NAME: &'static str = "DetectionOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.frame)?;
                },
                18 => {
                    self.detections.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.detections {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.frame.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.detections {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetectionOutput {
        DetectionOutput::new()
    }

    fn clear(&mut self) {
        self.frame.clear();
        self.detections.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetectionOutput {
        static instance: DetectionOutput = DetectionOutput {
            frame: ::protobuf::MessageField::none(),
            detections: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetectionOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetectionOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetectionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetectionOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:visionapi.Detection)
pub struct Detection {
    // message fields
    // @@protoc_insertion_point(field:visionapi.Detection.bounding_box)
    pub bounding_box: ::protobuf::MessageField<BoundingBox>,
    // @@protoc_insertion_point(field:visionapi.Detection.confidence)
    pub confidence: f32,
    // @@protoc_insertion_point(field:visionapi.Detection.class_id)
    pub class_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:visionapi.Detection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Detection {
    fn default() -> &'a Detection {
        <Detection as ::protobuf::Message>::default_instance()
    }
}

impl Detection {
    pub fn new() -> Detection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BoundingBox>(
            "bounding_box",
            |m: &Detection| { &m.bounding_box },
            |m: &mut Detection| { &mut m.bounding_box },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "confidence",
            |m: &Detection| { &m.confidence },
            |m: &mut Detection| { &mut m.confidence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "class_id",
            |m: &Detection| { &m.class_id },
            |m: &mut Detection| { &mut m.class_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Detection>(
            "Detection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Detection {
    const NAME: &'static str = "Detection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bounding_box)?;
                },
                21 => {
                    self.confidence = is.read_float()?;
                },
                24 => {
                    self.class_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bounding_box.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.confidence != 0. {
            my_size += 1 + 4;
        }
        if self.class_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.class_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bounding_box.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.confidence != 0. {
            os.write_float(2, self.confidence)?;
        }
        if self.class_id != 0 {
            os.write_uint32(3, self.class_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Detection {
        Detection::new()
    }

    fn clear(&mut self) {
        self.bounding_box.clear();
        self.confidence = 0.;
        self.class_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Detection {
        static instance: Detection = Detection {
            bounding_box: ::protobuf::MessageField::none(),
            confidence: 0.,
            class_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Detection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Detection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Detection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Detection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:visionapi.BoundingBox)
pub struct BoundingBox {
    // message fields
    // @@protoc_insertion_point(field:visionapi.BoundingBox.min_x)
    pub min_x: u32,
    // @@protoc_insertion_point(field:visionapi.BoundingBox.min_y)
    pub min_y: u32,
    // @@protoc_insertion_point(field:visionapi.BoundingBox.max_x)
    pub max_x: u32,
    // @@protoc_insertion_point(field:visionapi.BoundingBox.max_y)
    pub max_y: u32,
    // special fields
    // @@protoc_insertion_point(special_field:visionapi.BoundingBox.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BoundingBox {
    fn default() -> &'a BoundingBox {
        <BoundingBox as ::protobuf::Message>::default_instance()
    }
}

impl BoundingBox {
    pub fn new() -> BoundingBox {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_x",
            |m: &BoundingBox| { &m.min_x },
            |m: &mut BoundingBox| { &mut m.min_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_y",
            |m: &BoundingBox| { &m.min_y },
            |m: &mut BoundingBox| { &mut m.min_y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_x",
            |m: &BoundingBox| { &m.max_x },
            |m: &mut BoundingBox| { &mut m.max_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_y",
            |m: &BoundingBox| { &m.max_y },
            |m: &mut BoundingBox| { &mut m.max_y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BoundingBox>(
            "BoundingBox",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BoundingBox {
    const NAME: &'static str = "BoundingBox";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.min_x = is.read_uint32()?;
                },
                16 => {
                    self.min_y = is.read_uint32()?;
                },
                24 => {
                    self.max_x = is.read_uint32()?;
                },
                32 => {
                    self.max_y = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.min_x != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.min_x);
        }
        if self.min_y != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.min_y);
        }
        if self.max_x != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.max_x);
        }
        if self.max_y != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.max_y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.min_x != 0 {
            os.write_uint32(1, self.min_x)?;
        }
        if self.min_y != 0 {
            os.write_uint32(2, self.min_y)?;
        }
        if self.max_x != 0 {
            os.write_uint32(3, self.max_x)?;
        }
        if self.max_y != 0 {
            os.write_uint32(4, self.max_y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BoundingBox {
        BoundingBox::new()
    }

    fn clear(&mut self) {
        self.min_x = 0;
        self.min_y = 0;
        self.max_x = 0;
        self.max_y = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BoundingBox {
        static instance: BoundingBox = BoundingBox {
            min_x: 0,
            min_y: 0,
            max_x: 0,
            max_y: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BoundingBox {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BoundingBox").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BoundingBox {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BoundingBox {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18visionapi/detector.proto\x12\tvisionapi\x1a\x1bvisionapi/videosour\
    ce.proto\"t\n\x0fDetectionOutput\x12+\n\x05frame\x18\x01\x20\x01(\x0b2\
    \x15.visionapi.VideoFrameR\x05frame\x124\n\ndetections\x18\x02\x20\x03(\
    \x0b2\x14.visionapi.DetectionR\ndetections\"\x81\x01\n\tDetection\x129\n\
    \x0cbounding_box\x18\x01\x20\x01(\x0b2\x16.visionapi.BoundingBoxR\x0bbou\
    ndingBox\x12\x1e\n\nconfidence\x18\x02\x20\x01(\x02R\nconfidence\x12\x19\
    \n\x08class_id\x18\x03\x20\x01(\rR\x07classId\"a\n\x0bBoundingBox\x12\
    \x13\n\x05min_x\x18\x01\x20\x01(\rR\x04minX\x12\x13\n\x05min_y\x18\x02\
    \x20\x01(\rR\x04minY\x12\x13\n\x05max_x\x18\x03\x20\x01(\rR\x04maxX\x12\
    \x13\n\x05max_y\x18\x04\x20\x01(\rR\x04maxYB\x16\n\x14de.starwit.visiona\
    pib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::videosource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(DetectionOutput::generated_message_descriptor_data());
            messages.push(Detection::generated_message_descriptor_data());
            messages.push(BoundingBox::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
