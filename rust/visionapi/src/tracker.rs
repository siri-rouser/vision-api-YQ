// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 23.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `visionapi/tracker.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:visionapi.TrackingOutput)
pub struct TrackingOutput {
    // message fields
    // @@protoc_insertion_point(field:visionapi.TrackingOutput.frame)
    pub frame: ::protobuf::MessageField<super::videosource::VideoFrame>,
    // @@protoc_insertion_point(field:visionapi.TrackingOutput.tracked_detections)
    pub tracked_detections: ::std::vec::Vec<TrackedDetection>,
    // special fields
    // @@protoc_insertion_point(special_field:visionapi.TrackingOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingOutput {
    fn default() -> &'a TrackingOutput {
        <TrackingOutput as ::protobuf::Message>::default_instance()
    }
}

impl TrackingOutput {
    pub fn new() -> TrackingOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::videosource::VideoFrame>(
            "frame",
            |m: &TrackingOutput| { &m.frame },
            |m: &mut TrackingOutput| { &mut m.frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tracked_detections",
            |m: &TrackingOutput| { &m.tracked_detections },
            |m: &mut TrackingOutput| { &mut m.tracked_detections },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrackingOutput>(
            "TrackingOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TrackingOutput {
    const NAME: &'static str = "TrackingOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.frame)?;
                },
                18 => {
                    self.tracked_detections.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.tracked_detections {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.frame.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.tracked_detections {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingOutput {
        TrackingOutput::new()
    }

    fn clear(&mut self) {
        self.frame.clear();
        self.tracked_detections.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingOutput {
        static instance: TrackingOutput = TrackingOutput {
            frame: ::protobuf::MessageField::none(),
            tracked_detections: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TrackingOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TrackingOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TrackingOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackingOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:visionapi.TrackedDetection)
pub struct TrackedDetection {
    // message fields
    // @@protoc_insertion_point(field:visionapi.TrackedDetection.detection)
    pub detection: ::protobuf::MessageField<super::detector::Detection>,
    // @@protoc_insertion_point(field:visionapi.TrackedDetection.object_id)
    pub object_id: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:visionapi.TrackedDetection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackedDetection {
    fn default() -> &'a TrackedDetection {
        <TrackedDetection as ::protobuf::Message>::default_instance()
    }
}

impl TrackedDetection {
    pub fn new() -> TrackedDetection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::detector::Detection>(
            "detection",
            |m: &TrackedDetection| { &m.detection },
            |m: &mut TrackedDetection| { &mut m.detection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "object_id",
            |m: &TrackedDetection| { &m.object_id },
            |m: &mut TrackedDetection| { &mut m.object_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrackedDetection>(
            "TrackedDetection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TrackedDetection {
    const NAME: &'static str = "TrackedDetection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.detection)?;
                },
                18 => {
                    self.object_id = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.detection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.object_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.object_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.detection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.object_id.is_empty() {
            os.write_bytes(2, &self.object_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackedDetection {
        TrackedDetection::new()
    }

    fn clear(&mut self) {
        self.detection.clear();
        self.object_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackedDetection {
        static instance: TrackedDetection = TrackedDetection {
            detection: ::protobuf::MessageField::none(),
            object_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TrackedDetection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TrackedDetection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TrackedDetection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackedDetection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17visionapi/tracker.proto\x12\tvisionapi\x1a\x18visionapi/detector.p\
    roto\x1a\x1bvisionapi/videosource.proto\"\x89\x01\n\x0eTrackingOutput\
    \x12+\n\x05frame\x18\x01\x20\x01(\x0b2\x15.visionapi.VideoFrameR\x05fram\
    e\x12J\n\x12tracked_detections\x18\x02\x20\x03(\x0b2\x1b.visionapi.Track\
    edDetectionR\x11trackedDetections\"c\n\x10TrackedDetection\x122\n\tdetec\
    tion\x18\x01\x20\x01(\x0b2\x14.visionapi.DetectionR\tdetection\x12\x1b\n\
    \tobject_id\x18\x02\x20\x01(\x0cR\x08objectIdB\x16\n\x14de.starwit.visio\
    napib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::detector::file_descriptor().clone());
            deps.push(super::videosource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(TrackingOutput::generated_message_descriptor_data());
            messages.push(TrackedDetection::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
